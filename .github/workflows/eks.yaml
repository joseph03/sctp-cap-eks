name: Terraform CI/CD Foundation

on:
  push:

jobs:
  eks-cluster-dns-ingress:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # to write plan_output.txt as comments to PR
      contents: read


    steps:
#================== Checkout repository ==================
      - name: Checkout repository
        uses: actions/checkout@v4

#================== AWS Credentials ==================
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
#================== Terraform Setup ==================
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

#================== Check Terraform Format ==================
      - name: Check Terraform Format
        run: terraform fmt -check -recursive

      - name: Check Terraform Format (bootstrap-s3)
        working-directory: ./bootstrap-s3
        run: terraform fmt -check -recursive
      
      - name: Check Terraform Format (bootstrap-dynamodb)
        working-directory: ./bootstrap-dynamodb
        run: terraform fmt -check -recursive

#================== determine hcl & tfvars ==================
      - name: Determine Backend Config
        id: hcl_tfvars
        run: |
          # Determine which backend file to use based on branch
          # Note: GITHUB_REF is in the format refs/heads/branch-name
          # Current directory: /home/runner/work/sctp-cap-eks/sctp-cap-eks
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            BACKEND_FILE="backend-prod.hcl"
            TFVARS_FILE=env-prod.tfvars
          elif [[ $GITHUB_REF == refs/heads/uat ]]; then
            BACKEND_FILE="backend-uat.hcl"
            TFVARS_FILE=env-uat.tfvars
          else
            BACKEND_FILE="backend-dev.hcl"
            TFVARS_FILE=env-dev.tfvars
          fi

          # Verify backend file exists
          if [ ! -f "$BACKEND_FILE" ]; then
            echo "Error: Backend file $BACKEND_FILE not found"
            exit 1
          fi
          
          # Extract values from HCL file
          BUCKET=$(grep 'bucket' $BACKEND_FILE | awk -F '"' '{print $2}')
          DYNAMODB_TABLE=$(grep 'dynamodb_table' $BACKEND_FILE | awk -F '"' '{print $2}')
          #KEY=$(grep 'key' $BACKEND_FILE | awk -F '"' '{print $2}')
          #REGION=$(grep 'region' $BACKEND_FILE | awk -F '"' '{print $2}')
          
          # Set outputs for later steps
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "dynamodb_table=$DYNAMODB_TABLE" >> $GITHUB_OUTPUT
          #echo "key=$KEY" >> $GITHUB_OUTPUT
          #echo "region=$REGION" >> $GITHUB_OUTPUT

#================== debug tfvars file ==================
      # - name: Set tfvars file
      #   id: set_tfvars
      #   run: |
      #     echo "Full GITHUB_REF: $GITHUB_REF"
      #     BRANCH="${GITHUB_REF##*/}"
      #     echo "Branch is $BRANCH"
      #     if [[ "$BRANCH" == "uat" ]]; then
      #       echo "TFVARS_FILE=env-uat.tfvars" >> $GITHUB_OUTPUT
      #     elif [[ "$BRANCH" == "main" ]]; then
      #       echo "TFVARS_FILE=env-prod.tfvars" >> $GITHUB_OUTPUT
      #     else
      #       echo "TFVARS_FILE=env-dev.tfvars" >> $GITHUB_OUTPUT
      #     fi
      #   env:
      #     GITHUB_REF: ${{ github.ref }}

      - name: Debug tfvars file location
        run: |
          echo "Current directory: $(pwd)"   #Current directory: /home/runner/work/sctp-cap-eks/sctp-cap-eks
          ls -la
          echo "Checking for tfvars:"
          #ls -la $GITHUB_WORKSPACE/terraform.tfvars
          ls -la "$GITHUB_WORKSPACE/${{ steps.hcl_tfvars.outputs.TFVARS_FILE }}"

#================== bootstrap-s3 ==================
      - name: Terraform Init (bootstrap-s3)
        working-directory: ./bootstrap-s3
        run: terraform init

      - name: Validate Terraform (bootstrap-s3)
        working-directory: ./bootstrap-s3
        run: terraform validate

      - name: Check S3 bucket existence
        id: check_s3
        run: |
          # if aws s3api head-bucket --bucket "${ENV_S3_NAME}" 2>/dev/null; then
          if aws s3api head-bucket --bucket "${{ steps.hcl_tfvars.outputs.bucket }}" 2>/dev/null; then
            echo "s3_exists=true" >> $GITHUB_OUTPUT
          else
            echo "s3_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan (bootstrap-s3)
        working-directory: ./bootstrap-s3
        if: steps.check_s3.outputs.s3_exists == 'false' 
        #-var="s3_name=${ENV_S3_NAME}"
        run: terraform plan -out=tfplan-s3 -var-file=../${{ steps.hcl_tfvars.outputs.TFVARS_FILE }}

      - name: Terraform Apply (bootstrap-s3)
        working-directory: ./bootstrap-s3
        if: steps.check_s3.outputs.s3_exists == 'false' 
        run: terraform apply tfplan-s3

#==================== bootstrap-dynamodb ==================
      - name: Terraform Init (bootstrap-dynamodb)
        working-directory: ./bootstrap-dynamodb
        run: terraform init

      - name: Validate Terraform (bootstrap-dynamodb)
        working-directory: ./bootstrap-dynamodb
        run: terraform validate

      - name: Check DynamoDB table existence
        id: check_dynamodb
        run: |
          # if aws dynamodb describe-table --table-name "${ENV_DYNAMODB_NAME}" 2>/dev/null; then
          if aws dynamodb describe-table --table-name "${{ steps.hcl_tfvars.outputs.dynamodb_table }}" 2>/dev/null; then
            echo "dynamodb_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dynamodb_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan (bootstrap-dynamodb)
        working-directory: ./bootstrap-dynamodb
        if: steps.check_dynamodb.outputs.dynamodb_exists == 'false' 
        #-var="dynamodb_name=${ENV_DYNAMODB_NAME}"
        run: terraform plan -out=tfplan-dyn -var-file=../${{ steps.hcl_tfvars.outputs.TFVARS_FILE }} 

      - name: Terraform Apply (bootstrap-dynamodb)
        working-directory: ./bootstrap-dynamodb
        if: steps.check_dynamodb.outputs.dynamodb_exists == 'false' 
        run: terraform apply tfplan-dyn

#================== set hcl file ==================
      - name: Set hcl file
        id: set_hcl
        run: |
          echo "Full GITHUB_REF: $GITHUB_REF"
          BRANCH="${GITHUB_REF##*/}"
          echo "Branch is $BRANCH"
          if [[ "$BRANCH" == "uat" ]]; then
            echo "TFHCL_FILE=backend-uat.hcl" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "main" ]]; then
            echo "TFHCL_FILE=backend-prod.hcl" >> $GITHUB_OUTPUT
          else
            echo "TFHCL_FILE=backend-dev.hcl" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Debug hcl file location
        run: |
          # Current directory: /home/runner/work/sctp-cap-eks/sctp-cap-eks
          echo "Current directory: $(pwd)"   
          ls -la
          echo "Checking for hcl:"
          ls -la "$GITHUB_WORKSPACE/${{ steps.hcl_tfvars.outputs.TFHCL_FILE }}"

#================== vpc & eks init ==================
      - name: Terraform Init (root)
        run: terraform init -backend-config="$GITHUB_WORKSPACE/${{ steps.set_hcl.outputs.TFHCL_FILE }}"  

      - name: Validate Terraform (root)
        run: terraform validate

#================== vpc & eks plan ==================   
      - name: Terraform Plan with Target (VPC & EKS)
        timeout-minutes: 10
        run: |
          terraform plan -out=tfplan-vpc-eks -target=module.vpc -target=module.eks \
            -var-file="$GITHUB_WORKSPACE/${{ steps.hcl_tfvars.outputs.TFVARS_FILE }}"
            #-var-file="$GITHUB_WORKSPACE/terraform.tfvars"
            #-var="domain_name=${{ vars.DOMAIN_NAME || 'sctp-sandbox.com' }}" 
            # vars.DOMAIN_NAME refers to GitHub repository variables (Settings → Secrets and variables → Variables)
            # "domain_name is required by module.external_dns in workflow
            # -var="domain_name=sctp-sandbox.com"   # error if there is space "- var"
            # domain_name is defined in terraform.tfvars but it is not being extracted automatically
            # remove -lock=false 
                 
      - name: Terraform Apply Targeted Plan
        run: terraform apply tfplan-vpc-eks
#================== ingress, externa-dns, namespaces =================
      - name: Terraform Full Plan
        run: terraform plan -out=tfplan-full

      - name: Terraform Apply Full Plan
        run: terraform apply tfplan-full

#================== lock cleanup for cancelled job =================
      - name: Force Unlock Terraform State
        if: always() && github.event.action == 'cancelled'
        run: |
          aws sts get-caller-identity # Verify credentials
          LOCK_ID=$(aws dynamodb scan \
            --table-name $ENV_DYNAMODB_NAME \
            --region us-east-1 \
            --query "Items[?contains(LockID.S, 'ce-grp-3a-s3')].LockID.S" \
            --output text)
          
          if [ -n "$LOCK_ID" ]; then
            terraform force-unlock -force $LOCK_ID
          fi
          
#==================== show plan in PR ==================
      - name: Show Full Plan
        id: show_plan
        run: terraform show -no-color tfplan-full > plan_output.txt

      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message-path: plan_output.txt
